// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { useState, useEffect, useRef } from 'react';
import { useOutlet, history } from 'dumi';
import { warning } from '/Users/zhangqi/Desktop/pos-ui/node_modules/.pnpm/rc-util@5.44.4_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/rc-util';
import { SiteContext, type ISiteContext } from '/Users/zhangqi/Desktop/pos-ui/node_modules/.pnpm/dumi@2.4.21_@babel+core@7.28.4_@swc+helpers@0.5.15_@types+node@24.7.1_@types+react@19.2_b4da66a71792359bcf860565c42aee78/node_modules/dumi/dist/client/theme-api/context.js';
import { components } from '../meta/atoms';
import { locales } from '../locales/config';



const entryExports = {
};

// Static content
const pkg = {"name":"pos-ui-react","description":"A React component library with theme support","version":"1.0.0-beta.6"};
const historyType = "hash";
const hostname = undefined;
const themeConfig = {"title":"POS UI","footer":"Copyright © 2025 | Powered by POS UI","prefersColor":{"default":"light","switch":true},"nprogress":true,"lastUpdated":true,"name":"POS UI","logo":"/vite.svg","nav":[{"title":"指南","link":"/guide"},{"title":"组件","link":"/components/button"},{"title":"GitHub","link":"https://github.com/coolqi/pos-ui"}],"sidebar":{"/guide":[{"title":"介绍","children":[{"title":"快速开始","link":"/guide"},{"title":"安装","link":"/guide/installation"},{"title":"主题配置","link":"/guide/theme"}]}],"/components":[{"title":"通用组件","children":[{"title":"Button 按钮","link":"/components/button"},{"title":"Icon 图标","link":"/components/icon"},{"title":"Toast 提示框","link":"/components/toast"}]},{"title":"业务组件","children":[{"title":"FunctionCard 功能卡片","link":"/components/functionCard"}]}]},"socialLinks":{"github":"https://github.com/coolqi/pos-ui"}};
const _2_level_nav_available = true;

export default function DumiContextWrapper() {
  const outlet = useOutlet();
  const [loading, setLoading] = useState(false);
  const prev = useRef(history.location.pathname);

  useEffect(() => {
    return history.listen((next) => {
      if (next.location.pathname !== prev.current) {
        prev.current = next.location.pathname;

        // scroll to top when route changed
        document.documentElement.scrollTo(0, 0);
      }
    });
  }, []);

  const context: ISiteContext = React.useMemo(() => {
    const ctx = {
      pkg,
      historyType,
      entryExports,
      demos: null,
      components,
      locales,
      loading,
      setLoading,
      hostname,
      themeConfig,
      _2_level_nav_available,
    };

    // Proxy do not warning since `Object.keys` will get nothing to loop
    Object.defineProperty(ctx, 'demos', {
      get: () => {
        warning(false, '`demos` return empty in latest version, please use `useDemo` instead.');
        return {};
      },
    });

    return ctx;
  }, [
    pkg,
    historyType,
    entryExports,
    components,
    locales,
    loading,
    setLoading,
    hostname,
    themeConfig,
    _2_level_nav_available,
  ]);

  return (
    <SiteContext.Provider value={context}>
      {outlet}
    </SiteContext.Provider>
  );
}
